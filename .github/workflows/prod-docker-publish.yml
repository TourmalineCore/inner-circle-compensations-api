name: Deploy to Prod

on:
  push:
    branches:
      - master
  pull_request:

env:
  GITHUB_REGISTRY: ghcr.io

jobs:
  # this is needed to wait for the new docker image to be build and published to the registry
  # so that we can use the image to run ui of the needed commit related version as part of local-env
  # the idea is taken from here https://stackoverflow.com/a/71489231
  push_to_registry:
    uses: ./.github/workflows/docker-build-and-push.yml
    # without this it cannot login to the registry
    secrets: inherit 

  deploy-to-prod:
    name: Deploy service to k8s for prod environment  
    needs: [push_to_registry]
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Create default global .kube/config file
        run: |
          cd $HOME
          mkdir .kube
          echo "${{ secrets.KUBECONFIG }}" > .kube/config

      - name: Deploy
        uses: helmfile/helmfile-action@v1.9.0
        with:
          helmfile-version: 'v0.164.0'
          helm-version: 'v3.18.0'
          helmfile-args: >
            apply --suppress-diff --namespace dev-inner-circle -f Api/ci/helmfile.yaml
            --state-values-set image.tag=sha-${{ github.sha }} 
            --state-values-set ingress.enabled=true
            --state-values-set ingress.hostname=${{ secrets.HOST }}
            --state-values-set extraSecretEnvVars.ConnectionStrings__DefaultConnection=${{ secrets.POSTGRESQL_CONNECTION_STRING }}
            --state-values-set extraSecretEnvVars.AuthenticationOptions__PublicSigningKey=${{ secrets.PUBLIC_SIGNING_KEY }}
            --state-values-set extraSecretEnvVars.InnerCircleServiceUrls__EmployeesServiceUrl=${{ secrets.SALARY_SERVICE_URL }}
          helmfile-auto-init: "false"

  production-test:
    # Image to run project and tests
    needs: [deploy-to-prod]
    name: Run e2e on production
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # Get secrets to sign in
    - name: Set up Docker Compose environment variables
      run: |
        echo AUTH_LOGIN=${{ secrets.AUTH_LOGIN }} >> .env
        echo AUTH_PASSWORD=${{ secrets.AUTH_PASSWORD }} >> .env
    - name: Run service via docker-compose and run Karate-tests
    # Hide credentials and token from logs, get the number of failed and passed tests
      run: |
        LOGS=$(docker compose --profile production-e2e-tests up --abort-on-container-exit)
        FILTERED_LOGS=$(echo "$LOGS" | sed -E 's/"login":"[^"]*"/"login":"****"/g' \
                                 | sed -E 's/"password":"[^"]*"/"password":"****"/g' \
                                 | sed -E 's/"accessToken":[^,}]*"[^"]*"/"accessToken":"****"/g' \
                                 | sed -E 's/"Authorization":"[^"]*"/"Authorization":"****"/g' \
                                 | sed -E 's/"X-DEBUG-TOKEN":[^,}]*"[^"]*"/"X-DEBUG-TOKEN":"****"/g' \
                                 | sed -E 's/accessToken":\{[^}]*\}/accessToken":{"value":"****"}/g' \
                                 | sed -E 's/X-DEBUG-TOKEN: [^ ]*/X-DEBUG-TOKEN: ****/g' \
                                 | sed -E 's/Authorization: [^ ]*/Authorization: ****/g')
        echo "$FILTERED_LOGS"
        FAILED=$(echo "$FILTERED_LOGS" | grep -oP 'failed: *\K\d+')
        PASSED=$(echo "$FILTERED_LOGS" | grep -oP 'passed: *\K\d+')
        echo "Failed tests: $FAILED"
        echo "Passed tests: $PASSED"
        if [ "$FAILED" -gt 0 ]; then
          echo "Failed tests found! Failing the pipeline..."
          exit 1
        fi
        if [ "$PASSED" -eq 0 ]; then
          echo "No tests passed! Failing the pipeline..."
          exit 1
        fi
